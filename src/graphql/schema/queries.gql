type Query {
    showUsers(input: FilterShowUser!): ShowUsersResult

    showUserById(id: ID): ShowUserByIdResult

    showDicountById(id: ID): ShowDicountByIdResult

    showCheckById(id: ID): ShowCheckByIdResult

    login(email: String, password: String ): LoginResult

    showReportById(id: ID): ShowReportByIdResult

    showAllChecks(input: ShowAllChecksFilter!): ShowAllChecksResult
}

union ShowUsersResult = ShowUsersSuccess | InvalidInputError | InternalError
union ShowUserByIdResult = ShowUserByIdSuccess | InvalidInputError | InternalError
union ShowDicountByIdResult = ShowDicountByIdSuccess | InvalidInputError | InternalError
union ShowCheckByIdResult = ShowCheckByIdSuccess | InvalidInputError | InternalError
union LoginResult = LoginSuccess | InvalidInputError | InternalError
union ShowReportByIdResult = ShowReportByIdSuccess | InvalidInputError | InternalError
union ShowAllChecksResult = ShowAllChecksSuccess | InvalidInputError | InternalError

type ShowUsersSuccess {
    showUsersConnection: ShowUsersConnection
}

type ShowAllChecksSuccess{
    showAllChecksConnection: ShowChecksConnection
}

type ShowUserByIdSuccess {
    user: User
}

input FilterShowUser{
    pagination: FilterPagination
    role: [Role]
}

type ShowDicountByIdSuccess{
    discount: Discount
}

type ShowCheckByIdSuccess{
    check: Check
}

type LoginSuccess{
    token: String
}

type ShowReportByIdSuccess{
    report: Report
}

input ShowAllChecksFilter {
  pagination: FilterPagination
  user: ID
  isActive: Boolean
}